version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - back_v
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: ./be/
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./be:/app
    ports:
      - "8000:8000"
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
    depends_on:
      - db
    networks:
      - back_v

  front:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: front
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    networks:
      - front_v

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - web
      - front
    networks:
      - front_v
      - back_v

networks:
  back_v:
    driver: bridge
  front_v:
    driver: bridge

volumes:
  pg_data:
